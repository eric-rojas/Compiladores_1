
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import Analizador.Interprete.Simbolo.Arbol;
import Analizador.Interprete.Simbolo.Nativo;
import Analizador.Interprete.Expresion.Logica;
import Analizador.Interprete.Expresion.AccionLiteral;
import Analizador.Interprete.Expresion.VariableRandom;
import Analizador.Interprete.Expresion.VariableHistorial;
import Analizador.Interprete.Expresion.ComparacionListaFuncion;
import Analizador.Interprete.Expresion.ComparacionLista;
import Analizador.Interprete.Expresion.VariableRonda;
import Analizador.Interprete.LlamadaFuncion.GetMovesCount;
import Analizador.Interprete.LlamadaFuncion.GetLastNMoves;
import Analizador.Interprete.LlamadaFuncion.GetMove;
import Analizador.Interprete.LlamadaFuncion.LastMove;
import Analizador.Interprete.Instruccion.Estrategia;
import Analizador.Interprete.Instruccion.ReglaCondicional;
import Analizador.Interprete.Instruccion.ReglaElse;
import Analizador.Interprete.Instruccion.Juego;
import Analizador.Interprete.Instruccion.MainSeccion;
import Analizador.Interprete.Instruccion.Ejecucion;
import Analizador.Interprete.Abstracto.Instruccion;
import Analizador.Interprete.Simbolo.TablaSimbolos;
import Analizador.Interprete.Simbolo.Simbolo;
import java_cup.runtime.Symbol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\004\007\000\002\005\004\000" +
    "\002\007\005\000\002\010\007\000\002\012\005\000\002" +
    "\012\003\000\002\011\006\000\002\011\004\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\033\005\000\002\033\003\000\002\025\010\000\002" +
    "\025\014\000\002\025\010\000\002\025\006\000\002\014" +
    "\005\000\002\016\005\000\002\031\004\000\002\031\003" +
    "\000\002\032\012\000\002\032\005\000\002\032\007\000" +
    "\002\017\003\000\002\017\005\000\002\021\006\000\002" +
    "\021\006\000\002\021\006\000\002\021\006\000\002\022" +
    "\006\000\002\026\004\000\002\026\003\000\002\023\014" +
    "\000\002\027\005\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\010\004\011\005\005\006\007\001\002\000" +
    "\012\002\ufffe\004\ufffe\005\ufffe\006\ufffe\001\002\000\004" +
    "\053\162\001\002\000\012\002\ufffd\004\ufffd\005\ufffd\006" +
    "\ufffd\001\002\000\004\036\140\001\002\000\012\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\001\002\000\004\053\017\001" +
    "\002\000\012\002\ufffb\004\ufffb\005\ufffb\006\ufffb\001\002" +
    "\000\012\002\000\004\011\005\005\006\007\001\002\000" +
    "\004\002\015\001\002\000\004\002\001\001\002\000\012" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\001\002\000\004\036" +
    "\020\001\002\000\004\007\021\001\002\000\004\045\136" +
    "\001\002\000\004\037\135\001\002\000\004\010\025\001" +
    "\002\000\004\037\ufff9\001\002\000\004\045\026\001\002" +
    "\000\004\040\027\001\002\000\006\021\033\023\030\001" +
    "\002\000\036\020\044\047\041\050\035\051\037\062\053" +
    "\063\045\064\034\065\040\066\050\067\036\070\047\071" +
    "\052\072\046\073\051\001\002\000\006\041\132\044\131" +
    "\001\002\000\006\041\ufff5\044\ufff5\001\002\000\036\020" +
    "\044\047\041\050\035\051\037\062\053\063\045\064\034" +
    "\065\040\066\050\067\036\070\047\071\052\072\046\073" +
    "\051\001\002\000\004\042\115\001\002\000\046\010\ufff1" +
    "\011\ufff1\013\ufff1\014\ufff1\022\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1" +
    "\037\ufff1\041\ufff1\043\ufff1\044\ufff1\001\002\000\046\010" +
    "\uffee\011\uffee\013\uffee\014\uffee\022\uffee\025\uffee\026\uffee" +
    "\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035" +
    "\uffee\037\uffee\041\uffee\043\uffee\044\uffee\001\002\000\046" +
    "\010\uffef\011\uffef\013\uffef\014\uffef\022\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\035\uffef\037\uffef\041\uffef\043\uffef\044\uffef\001\002\000" +
    "\004\042\110\001\002\000\046\010\ufff2\011\ufff2\013\ufff2" +
    "\014\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\041\ufff2" +
    "\043\ufff2\044\ufff2\001\002\000\026\022\106\025\056\026" +
    "\061\027\064\030\066\031\060\032\063\033\057\034\067" +
    "\035\065\001\002\000\046\010\uffe8\011\uffe8\013\uffe8\014" +
    "\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\037\uffe8\041\uffe8\043" +
    "\uffe8\044\uffe8\001\002\000\046\010\ufff0\011\ufff0\013\ufff0" +
    "\014\ufff0\022\ufff0\025\ufff0\026\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\037\ufff0\041\ufff0" +
    "\043\ufff0\044\ufff0\001\002\000\004\042\101\001\002\000" +
    "\046\010\uffeb\011\uffeb\013\uffeb\014\uffeb\022\uffeb\025\uffeb" +
    "\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034" +
    "\uffeb\035\uffeb\037\uffeb\041\uffeb\043\uffeb\044\uffeb\001\002" +
    "\000\046\010\uffed\011\uffed\013\uffed\014\uffed\022\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed" +
    "\034\uffed\035\uffed\037\uffed\041\uffed\043\uffed\044\uffed\001" +
    "\002\000\004\042\054\001\002\000\046\010\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\022\uffe9\025\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\037\uffe9" +
    "\041\uffe9\043\uffe9\044\uffe9\001\002\000\046\010\uffec\011" +
    "\uffec\013\uffec\014\uffec\022\uffec\025\uffec\026\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037" +
    "\uffec\041\uffec\043\uffec\044\uffec\001\002\000\046\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\022\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\037\uffea\041\uffea\043\uffea\044\uffea\001\002\000\036\020" +
    "\044\047\041\050\035\051\037\062\053\063\045\064\034" +
    "\065\040\066\050\067\036\070\047\071\052\072\046\073" +
    "\051\001\002\000\026\025\056\026\061\027\064\030\066" +
    "\031\060\032\063\033\057\034\067\035\065\043\062\001" +
    "\002\000\036\020\044\047\041\050\035\051\037\062\053" +
    "\063\045\064\034\065\040\066\050\067\036\070\047\071" +
    "\052\072\046\073\051\001\002\000\036\020\044\047\041" +
    "\050\035\051\037\062\053\063\045\064\034\065\040\066" +
    "\050\067\036\070\047\071\052\072\046\073\051\001\002" +
    "\000\036\020\044\047\041\050\035\051\037\062\053\063" +
    "\045\064\034\065\040\066\050\067\036\070\047\071\052" +
    "\072\046\073\051\001\002\000\036\020\044\047\041\050" +
    "\035\051\037\062\053\063\045\064\034\065\040\066\050" +
    "\067\036\070\047\071\052\072\046\073\051\001\002\000" +
    "\046\010\uffd9\011\uffd9\013\uffd9\014\uffd9\022\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\037\uffd9\041\uffd9\043\uffd9\044\uffd9\001\002" +
    "\000\036\020\044\047\041\050\035\051\037\062\053\063" +
    "\045\064\034\065\040\066\050\067\036\070\047\071\052" +
    "\072\046\073\051\001\002\000\036\020\044\047\041\050" +
    "\035\051\037\062\053\063\045\064\034\065\040\066\050" +
    "\067\036\070\047\071\052\072\046\073\051\001\002\000" +
    "\036\020\044\047\041\050\035\051\037\062\053\063\045" +
    "\064\034\065\040\066\050\067\036\070\047\071\052\072" +
    "\046\073\051\001\002\000\036\020\044\047\041\050\035" +
    "\051\037\062\053\063\045\064\034\065\040\066\050\067" +
    "\036\070\047\071\052\072\046\073\051\001\002\000\036" +
    "\020\044\047\041\050\035\051\037\062\053\063\045\064" +
    "\034\065\040\066\050\067\036\070\047\071\052\072\046" +
    "\073\051\001\002\000\046\010\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\022\uffe0\025\056\026\061\027\064\030\066\031\060" +
    "\032\063\033\uffe0\034\uffe0\035\065\037\uffe0\041\uffe0\043" +
    "\uffe0\044\uffe0\001\002\000\046\010\uffe2\011\uffe2\013\uffe2" +
    "\014\uffe2\022\uffe2\025\056\026\061\027\uffe2\030\uffe2\031" +
    "\060\032\063\033\uffe2\034\uffe2\035\065\037\uffe2\041\uffe2" +
    "\043\uffe2\044\uffe2\001\002\000\046\010\uffdf\011\uffdf\013" +
    "\uffdf\014\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\065\037\uffdf\041" +
    "\uffdf\043\uffdf\044\uffdf\001\002\000\046\010\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\022\uffe5\025\056\026\061\027\uffe5\030" +
    "\uffe5\031\060\032\063\033\uffe5\034\uffe5\035\065\037\uffe5" +
    "\041\uffe5\043\uffe5\044\uffe5\001\002\000\046\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\022\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\065\037" +
    "\uffe3\041\uffe3\043\uffe3\044\uffe3\001\002\000\046\010\uffe6" +
    "\011\uffe6\013\uffe6\014\uffe6\022\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\065" +
    "\037\uffe6\041\uffe6\043\uffe6\044\uffe6\001\002\000\046\010" +
    "\uffe4\011\uffe4\013\uffe4\014\uffe4\022\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\065\037\uffe4\041\uffe4\043\uffe4\044\uffe4\001\002\000\046" +
    "\010\uffe1\011\uffe1\013\uffe1\014\uffe1\022\uffe1\025\056\026" +
    "\061\027\064\030\066\031\060\032\063\033\uffe1\034\uffe1" +
    "\035\065\037\uffe1\041\uffe1\043\uffe1\044\uffe1\001\002\000" +
    "\046\010\uffe7\011\uffe7\013\uffe7\014\uffe7\022\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034" +
    "\uffe7\035\065\037\uffe7\041\uffe7\043\uffe7\044\uffe7\001\002" +
    "\000\036\020\044\047\041\050\035\051\037\062\053\063" +
    "\045\064\034\065\040\066\050\067\036\070\047\071\052" +
    "\072\046\073\051\001\002\000\026\025\056\026\061\027" +
    "\064\030\066\031\060\032\063\033\057\034\067\035\065" +
    "\044\103\001\002\000\036\020\044\047\041\050\035\051" +
    "\037\062\053\063\045\064\034\065\040\066\050\067\036" +
    "\070\047\071\052\072\046\073\051\001\002\000\026\025" +
    "\056\026\061\027\064\030\066\031\060\032\063\033\057" +
    "\034\067\035\065\043\105\001\002\000\046\010\uffdc\011" +
    "\uffdc\013\uffdc\014\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\037" +
    "\uffdc\041\uffdc\043\uffdc\044\uffdc\001\002\000\036\020\044" +
    "\047\041\050\035\051\037\062\053\063\045\064\034\065" +
    "\040\066\050\067\036\070\047\071\052\072\046\073\051" +
    "\001\002\000\030\025\056\026\061\027\064\030\066\031" +
    "\060\032\063\033\057\034\067\035\065\041\ufff4\044\ufff4" +
    "\001\002\000\036\020\044\047\041\050\035\051\037\062" +
    "\053\063\045\064\034\065\040\066\050\067\036\070\047" +
    "\071\052\072\046\073\051\001\002\000\026\025\056\026" +
    "\061\027\064\030\066\031\060\032\063\033\057\034\067" +
    "\035\065\044\112\001\002\000\036\020\044\047\041\050" +
    "\035\051\037\062\053\063\045\064\034\065\040\066\050" +
    "\067\036\070\047\071\052\072\046\073\051\001\002\000" +
    "\026\025\056\026\061\027\064\030\066\031\060\032\063" +
    "\033\057\034\067\035\065\043\114\001\002\000\046\010" +
    "\uffda\011\uffda\013\uffda\014\uffda\022\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035" +
    "\uffda\037\uffda\041\uffda\043\uffda\044\uffda\001\002\000\036" +
    "\020\044\047\041\050\035\051\037\062\053\063\045\064" +
    "\034\065\040\066\050\067\036\070\047\071\052\072\046" +
    "\073\051\001\002\000\026\025\056\026\061\027\064\030" +
    "\066\031\060\032\063\033\057\034\067\035\065\044\117" +
    "\001\002\000\036\020\044\047\041\050\035\051\037\062" +
    "\053\063\045\064\034\065\040\066\050\067\036\070\047" +
    "\071\052\072\046\073\051\001\002\000\026\025\056\026" +
    "\061\027\064\030\066\031\060\032\063\033\057\034\067" +
    "\035\065\043\121\001\002\000\004\027\122\001\002\000" +
    "\004\040\123\001\002\000\036\020\044\047\041\050\035" +
    "\051\037\062\053\063\045\064\034\065\040\066\050\067" +
    "\036\070\047\071\052\072\046\073\051\001\002\000\030" +
    "\025\056\026\061\027\064\030\066\031\060\032\063\033" +
    "\057\034\067\035\065\041\uffdd\044\uffdd\001\002\000\006" +
    "\041\127\044\126\001\002\000\036\020\044\047\041\050" +
    "\035\051\037\062\053\063\045\064\034\065\040\066\050" +
    "\067\036\070\047\071\052\072\046\073\051\001\002\000" +
    "\046\010\uffdb\011\uffdb\013\uffdb\014\uffdb\022\uffdb\025\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\037\uffdb\041\uffdb\043\uffdb\044\uffdb\001\002" +
    "\000\030\025\056\026\061\027\064\030\066\031\060\032" +
    "\063\033\057\034\067\035\065\041\uffde\044\uffde\001\002" +
    "\000\006\021\033\023\030\001\002\000\004\037\ufff7\001" +
    "\002\000\006\041\ufff6\044\ufff6\001\002\000\030\025\056" +
    "\026\061\027\064\030\066\031\060\032\063\033\057\034" +
    "\067\035\065\041\ufff3\044\ufff3\001\002\000\012\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\001\002\000\036\020\044\047" +
    "\041\050\035\051\037\062\053\063\045\064\034\065\040" +
    "\066\050\067\036\070\047\071\052\072\046\073\051\001" +
    "\002\000\026\010\ufff8\025\056\026\061\027\064\030\066" +
    "\031\060\032\063\033\057\034\067\035\065\001\002\000" +
    "\004\015\142\001\002\000\006\015\uffc9\037\uffc9\001\002" +
    "\000\004\040\146\001\002\000\006\015\142\037\145\001" +
    "\002\000\006\015\uffca\037\uffca\001\002\000\012\002\uffcb" +
    "\004\uffcb\005\uffcb\006\uffcb\001\002\000\004\053\150\001" +
    "\002\000\006\041\152\044\151\001\002\000\006\041\uffc6" +
    "\044\uffc6\001\002\000\004\053\161\001\002\000\004\016" +
    "\153\001\002\000\004\036\154\001\002\000\004\017\155" +
    "\001\002\000\004\045\156\001\002\000\004\047\157\001" +
    "\002\000\004\037\160\001\002\000\006\015\uffc8\037\uffc8" +
    "\001\002\000\006\041\uffc7\044\uffc7\001\002\000\004\036" +
    "\163\001\002\000\010\011\170\013\166\014\167\001\002" +
    "\000\012\002\uffd8\004\uffd8\005\uffd8\006\uffd8\001\002\000" +
    "\012\011\170\013\166\014\167\037\230\001\002\000\004" +
    "\045\226\001\002\000\004\045\201\001\002\000\004\012" +
    "\172\001\002\000\012\011\uffd5\013\uffd5\014\uffd5\037\uffd5" +
    "\001\002\000\004\045\173\001\002\000\004\040\174\001" +
    "\002\000\004\053\175\001\002\000\004\044\176\001\002" +
    "\000\004\053\177\001\002\000\004\041\200\001\002\000" +
    "\012\011\uffd4\013\uffd4\014\uffd4\037\uffd4\001\002\000\004" +
    "\036\202\001\002\000\006\054\206\060\204\001\002\000" +
    "\006\037\224\044\223\001\002\000\006\056\215\057\216" +
    "\001\002\000\006\037\uffd1\044\uffd1\001\002\000\006\055" +
    "\210\061\207\001\002\000\004\045\213\001\002\000\004" +
    "\045\211\001\002\000\036\020\044\047\041\050\035\051" +
    "\037\062\053\063\045\064\034\065\040\066\050\067\036" +
    "\070\047\071\052\072\046\073\051\001\002\000\030\025" +
    "\056\026\061\027\064\030\066\031\060\032\063\033\057" +
    "\034\067\035\065\037\uffce\044\uffce\001\002\000\036\020" +
    "\044\047\041\050\035\051\037\062\053\063\045\064\034" +
    "\065\040\066\050\067\036\070\047\071\052\072\046\073" +
    "\051\001\002\000\030\025\056\026\061\027\064\030\066" +
    "\031\060\032\063\033\057\034\067\035\065\037\uffcf\044" +
    "\uffcf\001\002\000\004\045\221\001\002\000\004\045\217" +
    "\001\002\000\036\020\044\047\041\050\035\051\037\062" +
    "\053\063\045\064\034\065\040\066\050\067\036\070\047" +
    "\071\052\072\046\073\051\001\002\000\030\025\056\026" +
    "\061\027\064\030\066\031\060\032\063\033\057\034\067" +
    "\035\065\037\uffcc\044\uffcc\001\002\000\036\020\044\047" +
    "\041\050\035\051\037\062\053\063\045\064\034\065\040" +
    "\066\050\067\036\070\047\071\052\072\046\073\051\001" +
    "\002\000\030\025\056\026\061\027\064\030\066\031\060" +
    "\032\063\033\057\034\067\035\065\037\uffcd\044\uffcd\001" +
    "\002\000\006\054\206\060\204\001\002\000\012\011\uffd2" +
    "\013\uffd2\014\uffd2\037\uffd2\001\002\000\006\037\uffd0\044" +
    "\uffd0\001\002\000\036\020\044\047\041\050\035\051\037" +
    "\062\053\063\045\064\034\065\040\066\050\067\036\070" +
    "\047\071\052\072\046\073\051\001\002\000\034\011\uffd3" +
    "\013\uffd3\014\uffd3\025\056\026\061\027\064\030\066\031" +
    "\060\032\063\033\057\034\067\035\065\037\uffd3\001\002" +
    "\000\012\002\uffd7\004\uffd7\005\uffd7\006\uffd7\001\002\000" +
    "\012\011\uffd6\013\uffd6\014\uffd6\037\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\016\002\013\003\012\004\005\006\003\014" +
    "\007\022\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\005\006\015" +
    "\014\007\022\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\021" +
    "\007\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\031\012\030\001\001\000" +
    "\006\013\133\025\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\041\025\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\054" +
    "\025\042\001\001\000\002\001\001\000\006\013\077\025" +
    "\042\001\001\000\006\013\076\025\042\001\001\000\006" +
    "\013\075\025\042\001\001\000\006\013\074\025\042\001" +
    "\001\000\002\001\001\000\006\013\073\025\042\001\001" +
    "\000\006\013\072\025\042\001\001\000\006\013\071\025" +
    "\042\001\001\000\006\013\070\025\042\001\001\000\006" +
    "\013\067\025\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\101\025\042\001\001\000\002" +
    "\001\001\000\006\013\103\025\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\106\025\042\001\001" +
    "\000\002\001\001\000\006\013\110\025\042\001\001\000" +
    "\002\001\001\000\006\013\112\025\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\115\025\042\001" +
    "\001\000\002\001\001\000\006\013\117\025\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\123\025\042\033\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\127\025\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\136\025\042\001\001\000\002" +
    "\001\001\000\006\023\140\026\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\163\001\001\000\006\031" +
    "\164\032\170\001\001\000\002\001\001\000\004\032\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\202\021\204\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\211\025\042\001\001\000" +
    "\002\001\001\000\006\013\213\025\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\217\025\042\001\001\000\002\001\001\000\006\013\221" +
    "\025\042\001\001\000\002\001\001\000\004\021\224\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\226" +
    "\025\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



   // Enable debugging
   public boolean debugMode = true;

   public void syntax_error(Symbol s){
      System.out.println("Error de sintaxis en línea " + s.left + ", columna " + s.right + ": " + s.value);
   }  

   public void unrecovered_syntax_error(Symbol s){
      System.out.println("Error irrecuperable de sintaxis en línea " + s.left + ", columna " + s.right + ": " + s.value);
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


   // código en el constructor del analizador

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= entrada 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            // Aquí debemos construir y retornar el árbol AST
            System.out.println("Construyendo árbol AST desde la entrada");
            if (e instanceof ArrayList) {
                RESULT = new Arbol((ArrayList<Instruccion>)e);
                System.out.println("Árbol AST construido con " + ((ArrayList<Instruccion>)e).size() + " instrucciones");
            } else {
                System.out.println("ERROR: entrada no es de tipo ArrayList<Instruccion>");
                RESULT = new Arbol(new ArrayList<Instruccion>());
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entrada ::= entrada lista_estrategias 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando entrada con múltiples elementos");
                ArrayList<Instruccion> lista = (ArrayList<Instruccion>)e;
                if (e1 != null) {
                    lista.add((Instruccion)e1);
                    System.out.println("Añadido elemento a la lista. Total: " + lista.size());
                } else {
                    System.out.println("ADVERTENCIA: Elemento e1 es null");
                }
                RESULT = lista;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrada",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entrada ::= lista_estrategias 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando entrada con un solo elemento");
                ArrayList<Instruccion> lista = new ArrayList<Instruccion>();
                if (e != null) {
                    lista.add((Instruccion)e);
                    System.out.println("Lista creada con 1 elemento");
                } else {
                    System.out.println("ADVERTENCIA: Elemento e es null");
                }
                RESULT = lista;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("entrada",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_estrategias ::= estrategia 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Detectada definición de estrategia");
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estrategias",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_estrategias ::= juego 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Detectada definición de juego");
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estrategias",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_estrategias ::= main_section 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Detectada sección main");
                        RESULT = e;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_estrategias",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estrategia ::= STRATEGY IDENTIFICADOR LLAVEIZQ definiciones LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("Procesando estrategia: " + id);
                // Aquí extraer inicial y reglas de definiciones
                if (defs instanceof Object[]) {
                    Object[] defsArray = (Object[])defs;
                    Instruccion inicial = (Instruccion)defsArray[0];
                    List<Instruccion> reglas = (List<Instruccion>)defsArray[1];
                    RESULT = new Estrategia(id, inicial, reglas, sleft, sright);
                    System.out.println("Estrategia creada: " + id + " con " + reglas.size() + " reglas");
                } else {
                    System.out.println("ERROR: definiciones no tiene el formato esperado");
                    RESULT = null;
                }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estrategia",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definiciones ::= definicion_estrategia rules 
            {
              Object RESULT =null;
		int inicialleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int inicialright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object inicial = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int reglasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reglasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object reglas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("Procesando definiciones de estrategia");
                    // Devolver un array con inicial y reglas
                    Object[] resultado = new Object[2];
                    resultado[0] = inicial;
                    resultado[1] = reglas;
                    RESULT = resultado;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definicion_estrategia ::= INITIAL DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println("Procesando definición inicial");
                            RESULT = e;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_estrategia",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rules ::= RULES DOSPUNTOS CORIZQ lista_reglas CORDER 
            {
              Object RESULT =null;
		int reglasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int reglasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reglas = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            System.out.println("Procesando reglas");
            RESULT = reglas;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rules",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_reglas ::= lista_reglas COMA reglas 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int reglaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reglaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object regla = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    System.out.println("Añadiendo regla a la lista");
                    ArrayList<Instruccion> listaReglas = (ArrayList<Instruccion>)lista;
                    listaReglas.add((Instruccion)regla);
                    RESULT = listaReglas;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_reglas ::= reglas 
            {
              Object RESULT =null;
		int reglaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reglaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object regla = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                   System.out.println("Creando lista con la primera regla");
                   ArrayList<Instruccion> listaReglas = new ArrayList<Instruccion>();
                   listaReglas.add((Instruccion)regla);
                   RESULT = listaReglas;
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_reglas",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reglas ::= IF expresion THEN expresion 
            {
              Object RESULT =null;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object condicion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int accionVerdaderaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int accionVerdaderaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object accionVerdadera = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             System.out.println("Procesando regla condicional if-then");
             //RESULT = new ReglaCondicional(condicion, accionVerdadera, null, condicionleft, condicionright);
             RESULT = new ReglaCondicional((Instruccion)condicion, (Instruccion)accionVerdadera, null, condicionleft, condicionright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // reglas ::= ELSE expresion 
            {
              Object RESULT =null;
		int accionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int accionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object accion = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
             System.out.println("Procesando regla else");
             RESULT = new ReglaElse((Instruccion)accion, accionleft, accionright);
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("reglas",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando número: " + n);
                RESULT = new Nativo(Double.parseDouble(n), nleft, nright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando decimal: " + d);
                RESULT = new Nativo(Double.parseDouble(d), dleft, dright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= ACC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando acción: " + a);
                RESULT = new AccionLiteral(a, aleft, aright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresion ::= BOOLEANO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando booleano: " + b);
                RESULT = new Nativo(Boolean.parseBoolean(b), bleft, bright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= RANDOM 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando random");
                RESULT = new VariableRandom(rleft, rright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= OPPONENT_HISTORY 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando historial del oponente");
                RESULT = new VariableHistorial(VariableHistorial.TipoHistorial.OPONENTE, oleft, oright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= SELF_HISTORY 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando historial propio");
                RESULT = new VariableHistorial(VariableHistorial.TipoHistorial.PROPIO, sleft, sright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= TOTAL_ROUNDS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando total de rondas");
                RESULT = new VariableRonda(VariableRonda.TipoRonda.TOTAL, tleft, tright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= ROUND_NUMBER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando número de ronda");
                RESULT = new VariableRonda(VariableRonda.TipoRonda.NUMERO_ACTUAL, rleft, rright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= HISTORY 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando historial general");
                RESULT = new VariableHistorial(VariableHistorial.TipoHistorial.GENERAL, hleft, hright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= llamada_funcion 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando llamada a función");
                RESULT = f;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion MENORIGUAL expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación <=");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "<=", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion MAYORIGUAL expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación >=");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, ">=", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion IGUAL expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación ==");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "==", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion MENOR expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación <");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "<", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion MAYOR expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación >");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, ">", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación !=");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "!=", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= expresion AND expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación &&");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "&&", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= expresion OR expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación ||");
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "||", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= expresion NOT expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando operación NOT");
                // Aquí implementar la operación NOT según tu estructura
                RESULT = new Logica((Instruccion)e1, (Instruccion)e2, "NOT", e1left, e1right);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_expresiones ::= lista_expresiones COMA expresion 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Añadiendo expresión a lista");
                        ArrayList<Instruccion> listaExpresiones = (ArrayList<Instruccion>)lista;
                        listaExpresiones.add((Instruccion)expr);
                        RESULT = listaExpresiones;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_expresiones ::= expresion 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Creando lista con primera expresión");
                        ArrayList<Instruccion> listaExpresiones = new ArrayList<Instruccion>();
                        listaExpresiones.add((Instruccion)expr);
                        RESULT = listaExpresiones;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // llamada_funcion ::= GET_MOVES_COUNT PARENTESISIZQ expresion COMA expresion PARENTESISDER 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      System.out.println("Procesando llamada a get_moves_count");
                      RESULT = new GetMovesCount((Instruccion)e1, (Instruccion)e2, gleft, gright);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // llamada_funcion ::= GET_LAST_N_MOVES PARENTESISIZQ expresion COMA expresion PARENTESISDER IGUAL CORIZQ lista_expresiones CORDER 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        System.out.println("Procesando comparación de get_last_n_moves con lista");
                        RESULT = new ComparacionListaFuncion((Instruccion)e1, (Instruccion)e2, (List<Instruccion>)lista, gleft, gright);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // llamada_funcion ::= GET_MOVE PARENTESISIZQ expresion COMA expresion PARENTESISDER 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      System.out.println("Procesando llamada a get_move");
                      RESULT = new GetMove((Instruccion)e1, (Instruccion)e2, gleft, gright);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // llamada_funcion ::= LAST_MOVE PARENTESISIZQ expresion PARENTESISDER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                      System.out.println("Procesando llamada a last_move");
                      RESULT = new LastMove((Instruccion)e1, lleft, lright);
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_funcion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // juego ::= MATCH IDENTIFICADOR definicion_juego 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            System.out.println("Procesando juego: " + id);
            // Extraer información del objeto def
            try {
                // Vamos a asumir que def es un objeto que contiene los elementos de definición del juego
                if (def instanceof Object[]) {
                    Object[] defArray = (Object[]) def;
                    String[] estrategias = null;
                    Instruccion rondas = null;
                    Map<String, Instruccion> configPuntaje = null;
                    
                    // Extraer componentes de la definición
                    for (Object item : defArray) {
                        if (item instanceof String[]) {
                            estrategias = (String[]) item;
                        } else if (item instanceof Instruccion && rondas == null) {
                            rondas = (Instruccion) item;
                        } else if (item instanceof Map) {
                            configPuntaje = (Map<String, Instruccion>) item;
                        }
                    }
                    
                    // Crear el objeto Juego
                    RESULT = new Juego(id, estrategias, rondas, configPuntaje, mleft, mright);
                    System.out.println("Juego creado: " + id);
                } else {
                    System.out.println("ERROR: Definición de juego en formato inesperado: " + 
                                      (def != null ? def.getClass().getName() : "null"));
                    // Crear un juego con valores por defecto para evitar error
                    RESULT = new Juego(id, new String[]{"Estrategia1", "Estrategia2"}, 
                                      new Nativo(100, mleft, mright), new HashMap<>(), mleft, mright);
                }
            } catch (Exception e) {
                System.out.println("ERROR al crear juego: " + e.getMessage());
                e.printStackTrace();
                // Crear juego con valores por defecto
                RESULT = new Juego(id, new String[]{"Estrategia1", "Estrategia2"}, 
                                  new Nativo(100, mleft, mright), new HashMap<>(), mleft, mright);
            }
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("juego",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // definicion_juego ::= LLAVEIZQ lista_definicion_juego LLAVEDER 
            {
              Object RESULT =null;
		int defsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object defs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        System.out.println("Procesando definición de juego");
                        RESULT = defs;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_juego",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_definicion_juego ::= lista_definicion_juego definicion_juego_elemento 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println("Añadiendo elemento a definición de juego");
                            // Crear un array de objetos para almacenar los elementos
                            Object[] result = new Object[3]; // estrategias, rondas, puntajes
                            
                            // Si lista ya es un array, copiar sus valores
                            if (lista instanceof Object[]) {
                                Object[] listaArray = (Object[]) lista;
                                for (int i = 0; i < listaArray.length && i < result.length; i++) {
                                    if (listaArray[i] != null) {
                                        result[i] = listaArray[i];
                                    }
                                }
                            }
                            
                            // Añadir el nuevo elemento (elem) en la posición adecuada
                            if (elem instanceof String[]) {
                                result[0] = elem; // estrategias
                            } else if (elem instanceof Instruccion) {
                                result[1] = elem; // rondas
                            } else if (elem instanceof Map) {
                                result[2] = elem; // configuración de puntaje
                            }
                            
                            RESULT = result;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_definicion_juego",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_definicion_juego ::= definicion_juego_elemento 
            {
              Object RESULT =null;
		int elemleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elemright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object elem = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println("Iniciando lista de definición de juego");
                            // Crear un array para un solo elemento
                            Object[] result = new Object[3]; // estrategias, rondas, puntajes
                            
                            // Colocar elem en la posición adecuada
                            if (elem instanceof String[]) {
                                result[0] = elem; // estrategias
                            } else if (elem instanceof Instruccion) {
                                result[1] = elem; // rondas
                            } else if (elem instanceof Map) {
                                result[2] = elem; // configuración de puntaje
                            }
                            
                            RESULT = result;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_definicion_juego",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // definicion_juego_elemento ::= PLAYERS STRATEGIES DOSPUNTOS CORIZQ IDENTIFICADOR COMA IDENTIFICADOR CORDER 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                System.out.println("Procesando estrategias de jugadores: " + e1 + ", " + e2);
                                // Aquí guardar las estrategias según tu estructura
                                RESULT = new String[]{e1, e2};
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_juego_elemento",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // definicion_juego_elemento ::= ROUNDS DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                System.out.println("Procesando número de rondas");
                                RESULT = e;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_juego_elemento",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // definicion_juego_elemento ::= SCORING DOSPUNTOS LLAVEIZQ parametros LLAVEDER 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                System.out.println("Procesando configuración de puntaje");
                                RESULT = params;
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion_juego_elemento",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= parametro 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 System.out.println("Iniciando mapa de parámetros");
                 RESULT = p;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= parametros COMA parametro 
            {
              Object RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                 System.out.println("Añadiendo parámetro a mapa");
                 // Aquí combinar los parámetros según tu estructura
                 if (params instanceof Map && p instanceof Map) {
                     Map<String, Instruccion> mapaResultante = new HashMap<>((Map<String, Instruccion>)params);
                     mapaResultante.putAll((Map<String, Instruccion>)p);
                     RESULT = mapaResultante;
                 } else {
                     System.out.println("ERROR: Formato inesperado en parámetros");
                     RESULT = new HashMap<String, Instruccion>();
                 }
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= MUTUAL COOPERATION DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando parámetro mutual cooperation");
                Map<String, Instruccion> parametro = new HashMap<>();
                parametro.put("mutual cooperation", (Instruccion)e);
                RESULT = parametro;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= MUTUAL DEFECTION DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando parámetro mutual defection");
                Map<String, Instruccion> parametro = new HashMap<>();
                parametro.put("mutual defection", (Instruccion)e);
                RESULT = parametro;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametro ::= BETRAYAL REWARD DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando parámetro betrayal reward");
                Map<String, Instruccion> parametro = new HashMap<>();
                parametro.put("betrayal reward", (Instruccion)e);
                RESULT = parametro;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // parametro ::= BETRAYAL PUNISHMENT DOSPUNTOS expresion 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                System.out.println("Procesando parámetro betrayal punishment");
                Map<String, Instruccion> parametro = new HashMap<>();
                parametro.put("betrayal punishment", (Instruccion)e);
                RESULT = parametro;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametro",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // main_section ::= MAIN LLAVEIZQ lista_ejecuciones LLAVEDER 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    System.out.println("Procesando sección main con " + ((List)le).size() + " ejecuciones");
                    RESULT = new MainSeccion((List<Instruccion>)le, mleft, mright);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_section",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lista_ejecuciones ::= lista_ejecuciones ejecucion 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Agregando ejecución a la lista");
                        List<Instruccion> lista = (List<Instruccion>)le;
                        lista.add((Instruccion)e);
                        RESULT = lista;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ejecuciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // lista_ejecuciones ::= ejecucion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        System.out.println("Creando lista con primera ejecución");
                        List<Instruccion> lista = new ArrayList<>();
                        lista.add((Instruccion)e);
                        RESULT = lista;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_ejecuciones",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ejecucion ::= RUN CORIZQ lista_identificadores CORDER WITH LLAVEIZQ SEED DOSPUNTOS NUMERO LLAVEDER 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("Procesando ejecución con " + ((List)li).size() + " juegos y semilla: " + n);
                RESULT = new Ejecucion((List<String>)li, Long.parseLong(n), rleft, rright);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecucion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // lista_identificadores ::= lista_identificadores COMA IDENTIFICADOR 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println("Agregando juego " + id + " a la lista");
                            List<String> lista = (List<String>)li;
                            lista.add(id);
                            RESULT = lista;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_identificadores ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            System.out.println("Creando lista con primer juego: " + id);
                            List<String> lista = new ArrayList<>();
                            lista.add(id);
                            RESULT = lista;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_identificadores",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
